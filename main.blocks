<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="hsTS1#DBXP/#}6EX*w4;" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="l?|PZ`HXFU@=/idpyZHi" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace autoBot {" line1="" line2="" line3="" line4="    const MIN_VEL = 150;  //   0 km/hr" line5="    const MAX_VEL = 1023; // 100 km/hr" line6="" line7="    const FIRST_GEAR   = 0" line8="    const SECOND_GEAR  = 1" line9="    const THIRD_GEAR   = 2" line10="    const FOURTH_GEAR  = 3" line11="    const FIFTH_GEAR   = 4" line12="    const DRIVE_GEAR   = 5" line13="    const NEUTRAL_GEAR = 6" line14="    const PARKING_GEAR = 7" line15="    const REVERSE_GEAR = 8" line16="" line17="    /**" line18="     * Setup variables, pins and enumerations" line19="     */" line20="" line21="    // Disable LED Matrix" line22="    led.enable(true) // Set true to DEBUG" line23="" line24="    export enum Errors {" line25="        //% block=&quot;Error 001&quot;," line26="        Errror001 = 100," line27="        //% block=&quot;Error 002&quot;," line28="        Errror002 = 500" line29="" line30="    }" line31="    " line32="    // Engine Sates" line33="    export enum Engine {" line34="        //% block=&quot;off&quot;" line35="        //% jres=icons.engine-off" line36="        Off = 0," line37="        //% block=&quot;on&quot;" line38="        //% jres=icons.engine-on" line39="        On = 1" line40="    }" line41="" line42="    // Directions" line43="    export enum Directions {" line44="        //% block=&quot;left&quot;" line45="        //% jres=icons.direction-left" line46="        Left = 1," line47="        //% block=&quot;front&quot;" line48="        //% jres=icons.direction-front" line49="        Front = 2," line50="        //% block=&quot;right&quot;" line51="        //% jres=icons.direction-right" line52="        Right = 3" line53="    }" line54="" line55="    // Seat Belt States" line56="    export enum BeltStates {" line57="        //% block=&quot;unfasten&quot;" line58="        //% jres=icons.belt-unfasten" line59="        Unfasten = 0," line60="        //% block=&quot;fasten&quot;" line61="        //% jres=icons.belt-fasten" line62="        Fasten = 1" line63="    }" line64="" line65="    // Signs" line66="    export enum Signs {" line67="        //% block=&quot;stop&quot;" line68="        //% jres=icons.stop-sign" line69="        Stop = 0," line70="        //% block=&quot;left&quot;" line71="        //% jres=icons.left-sign" line72="        Left = 1," line73="        //% block=&quot;straight&quot;" line74="        //% jres=icons.straight-sign" line75="        Straight = 2," line76="        //% block=&quot;backward&quot;" line77="        //% jres=icons.backward-sign" line78="        //Backward = 3," line79="        //% block=&quot;right&quot;" line80="        //% jres=icons.right-sign" line81="        Right = 4" line82="    }" line83="" line84="    // Manual Gears" line85="    export enum ManualGears {" line86="        //% block=&quot;first gear&quot;" line87="        //% jres=icons.first-gear" line88="        First = FIRST_GEAR," line89="        //% block=&quot;third gear&quot;" line90="        //% jres=icons.third-gear" line91="        Third = THIRD_GEAR," line92="        //% block=&quot;fifth gear&quot;" line93="        //% jres=icons.neutral-gear" line94="        Neutral = NEUTRAL_GEAR," line95="        //% block=&quot;second gear&quot;" line96="        //% jres=icons.second-gear" line97="        Second = SECOND_GEAR," line98="        //% block=&quot;fourth gear&quot;" line99="        //% jres=icons.fourth-gear" line100="        Fourth = FOURTH_GEAR," line101="        //% block=&quot;reverse gear&quot;" line102="        //% jres=icons.reverse-gear" line103="        Reverse = REVERSE_GEAR" line104="    }" line105="" line106="    // Automatic Gears" line107="    export enum AutomaticGears {" line108="        //% block=&quot;first gear&quot;" line109="        //% jres=icons.parking-gear" line110="        Parking = PARKING_GEAR," line111="        //% block=&quot;third gear&quot;" line112="        //% jres=icons.reverse-gear" line113="        Reverse = REVERSE_GEAR," line114="        //% block=&quot;fifth gear&quot;" line115="        //% jres=icons.neutral-gear" line116="        Neutral = NEUTRAL_GEAR," line117="        //% block=&quot;second gear&quot;" line118="        //% jres=icons.drive-gear" line119="        Drive = DRIVE_GEAR," line120="        //% block=&quot;fourth gear&quot;" line121="        //% jres=icons.second-gear" line122="        Second = SECOND_GEAR," line123="        //% block=&quot;reverse gear&quot;" line124="        //% jres=icons.first-gear" line125="        First = FIRST_GEAR" line126="    }" line127="" line128="    /**" line129="     * Global Variables" line130="     */" line131="" line132="    let _sign = Signs.Straight" line133="    let _belt = BeltStates.Unfasten" line134="    let _direction = Directions.Front" line135="    let _engine = Engine.Off" line136="    let _automaticGear = AutomaticGears.Parking" line137="    let _manualGear = ManualGears.Neutral" line138="    let _speed = 0" line139="    let _forward = true" line140="    let _gear = 0" line141="" line142="" line143="    /**" line144="     * Stop the autobot" line145="     */" line146="    export function _stop(): void {" line147="        console.log('Stop')" line148="        pins.digitalWritePin(DigitalPin.P12, 0)" line149="        pins.digitalWritePin(DigitalPin.P13, 0)" line150="        pins.digitalWritePin(DigitalPin.P14, 0)" line151="        pins.digitalWritePin(DigitalPin.P15, 0)" line152="    }" line153="" line154="    /**" line155="     * Turn the autobot right" line156="     */" line157="    export function _right(): void {" line158="        console.log('Right')" line159="        pins.digitalWritePin(DigitalPin.P12, _forward?0:1)" line160="        pins.digitalWritePin(DigitalPin.P13, _forward?0:1)" line161="        pins.digitalWritePin(DigitalPin.P14, _forward?1:0)" line162="        pins.digitalWritePin(DigitalPin.P15, _forward?0:1)" line163="    }" line164="" line165="    /**" line166="    * Turn the autobot left" line167="    */" line168="    export function _left(): void {" line169="        console.log('Left')" line170="        pins.digitalWritePin(DigitalPin.P12, _forward?0:1)" line171="        pins.digitalWritePin(DigitalPin.P13, _forward?1:0)" line172="        pins.digitalWritePin(DigitalPin.P14, _forward?0:1)" line173="        pins.digitalWritePin(DigitalPin.P15, _forward?0:1)" line174="    }" line175="" line176="    /**" line177="     * Moves the autobot straight" line178="     */" line179="    export function _straight(): void {" line180="        console.log('Straight')" line181="        pins.digitalWritePin(DigitalPin.P12, _forward?0:1)" line182="        pins.digitalWritePin(DigitalPin.P13, _forward?1:0)" line183="        pins.digitalWritePin(DigitalPin.P14, _forward?1:0)" line184="        pins.digitalWritePin(DigitalPin.P15, _forward?0:1)" line185="    }" line186="" line187="    /**" line188="     * Set Speed" line189="     * @param gear" line190="     */" line191="    function _setSpeed(gear: number): void {" line192="        switch (gear) {" line193="            case NEUTRAL_GEAR:" line194="                _speed = 0" line195="                break" line196="            case PARKING_GEAR:" line197="                _speed = 0" line198="                break" line199="            case FIRST_GEAR:" line200="                _speed = 20" line201="                break" line202="            case REVERSE_GEAR:" line203="                _speed = 20" line204="                break" line205="            case SECOND_GEAR:" line206="                _speed = 40" line207="                break" line208="            case THIRD_GEAR:" line209="                _speed = 60" line210="                break" line211="            case FOURTH_GEAR:" line212="                _speed = 80" line213="                break" line214="            case FIFTH_GEAR:" line215="                _speed = 100" line216="                break" line217="            case DRIVE_GEAR:" line218="                _speed = 100" line219="                break" line220="        }" line221="        let s = _speed * (MAX_VEL - MIN_VEL) / 100 + MIN_VEL; // Adjust to the min and max PWM values" line222="        // PWM para motor izquierdo" line223="        pins.analogWritePin(AnalogPin.P8, s)" line224="        // PWM para motor derecho" line225="        pins.analogWritePin(AnalogPin.P16, s)" line226="    }" line227="" line228="    /**" line229="     * Set seat belt state" line230="     * @param status" line231="     */" line232="    //% blockId=setSeatbelt" line233="    //% block=&quot;seat belt $state&quot;" line234="    //% state.defl=BeltStates.unfasten" line235="    //% state.fieldEditor=&quot;imagedropdown&quot;" line236="    //% state.fieldOptions.columns=2" line237="    //% state.fieldOptions.width=&quot;150&quot;" line238="    //% state.fieldOptions.maxRows=1" line239="    //% group=&quot;Commands&quot;" line240="    //% weight=590" line241="    export function setSeatbelt(state: BeltStates): void {" line242="        if (state == BeltStates.Unfasten) {" line243="            if (_engine == Engine.Off) {" line244="                _belt = state" line245="            } else {" line246="                console.log(autoBot.Errors.Errror001)" line247="                console.error('Do not unfasten your seat belt while the engine is on')" line248="            }" line249="        } else {" line250="            _belt = state" line251="        }" line252="    }" line253="" line254="    /**" line255="    * Turn Engine On/Off" line256="    * @param state" line257="    */" line258="    //% blockId=setEngine" line259="    //% block=&quot;turn engine $state&quot;" line260="    //% state.defl=Engine.off" line261="    //% state.fieldEditor=&quot;imagedropdown&quot; " line262="    //% state.fieldOptions.columns=2" line263="    //% state.fieldOptions.width=&quot;150&quot;" line264="    //% state.fieldOptions.maxRows=1" line265="    //% group=&quot;Commands&quot;" line266="    //% weight=550" line267="    export function setEngine(state: Engine): void {" line268="" line269="        if (_belt == BeltStates.Unfasten &amp;&amp; state == Engine.On) {" line270="            console.warn('You cannot turn on the engine if you have not fastened your seat belt.')" line271="            return;" line272="        }" line273="" line274="        if (_manualGear != ManualGears.Neutral &amp;&amp; state == Engine.On) {" line275="            console.warn('You need to put the AutoBot in neutral or parking to turn on the engine.')" line276="            return;" line277="        }" line278="" line279="        if (_manualGear != ManualGears.Neutral &amp;&amp; state == Engine.Off) {" line280="            console.warn('You need to put the AutoBot in neutral or parking to be able to turn off the engine.')" line281="            return;" line282="        }" line283="" line284="        _engine = state;" line285="    }" line286="" line287="    /**" line288="    * Set Direction" line289="    * @param direction" line290="    */" line291="    //% blockId=turnDirection" line292="    //% block=&quot;turn direction $direction&quot;" line293="    //% direction.defl=Directions.front" line294="    //% direction.fieldEditor=&quot;imagedropdown&quot; " line295="    //% direction.fieldOptions.columns=3" line296="    //% direction.fieldOptions.width=&quot;225&quot;" line297="    //% direction.fieldOptions.maxRows=1" line298="    //% group=&quot;Commands&quot;" line299="    //% weight=380" line300="    export function turnDirection(direction: Directions): void {" line301="        _direction = direction" line302="    }" line303="" line304="    /**" line305="    * Set Manual Gear" line306="    * @param gear" line307="    */" line308="    //% blockId=setManualGear" line309="    //% block=&quot;set gear $gear&quot;" line310="    //% blockImage=icons.first-gear" line311="    //% gear.defl=Gears.Third" line312="    //% gear.fieldEditor=&quot;imagedropdown&quot; " line313="    //% gear.fieldOptions.columns=3" line314="    //% gear.fieldOptions.width=&quot;225&quot;" line315="    //% gear.fieldOptions.maxRows=2" line316="    //% group=&quot;Commands&quot;" line317="    //% weight=370" line318="    export function setManualGear(gear: ManualGears): void {" line319="        if (_belt == BeltStates.Fasten) {" line320="            _manualGear = gear" line321="            _gear = gear" line322="            if (gear == REVERSE_GEAR) {" line323="                _forward = false" line324="            } else {" line325="                _forward = true" line326="            }" line327="        } else {" line328="            console.warn('You cannot shift gears if you do not have your seat belt fastened.')" line329="        }" line330="    }" line331="" line332="    /**" line333="        * Set Automatic Gear " line334="        * @param gear" line335="        */" line336="    //% blockId=setAutomaticGear" line337="    //% block=&quot;set gear $gear&quot;" line338="    //% gear.defl=Gears.Third" line339="    //% gear.fieldEditor=&quot;imagedropdown&quot; " line340="    //% gear.fieldOptions.columns=1" line341="    //% gear.fieldOptions.width=&quot;75&quot;" line342="    //% gear.fieldOptions.maxRows=6" line343="    //% group=&quot;Commands&quot;" line344="    //% weight=360" line345="    export function setAutomaticGear(gear: AutomaticGears): void {" line346="        if (_belt == BeltStates.Fasten) {" line347="            _automaticGear = gear" line348="            _gear = gear" line349="            if (gear == REVERSE_GEAR) {" line350="                _forward = false" line351="            } else {" line352="                _forward = true" line353="            }" line354="        } else {" line355="            console.warn('You cannot shift gears if you do not have your seat belt fastened.')" line356="        }" line357="    }" line358="" line359="    /**" line360="     * Move de AutoBot" line361="     */" line362="    //% blockId=move" line363="    //% block=&quot;move&quot;" line364="    //% block.loc.es-ES=&quot;moverse&quot;" line365="    //% group=&quot;Commands&quot;" line366="    //% weight=340" line367="    export function move(): void {" line368="        _setSpeed(_gear)" line369="        console.log('Move: ' + _speed);" line370="        switch (_direction) {" line371="            case Directions.Front:" line372="                _straight()" line373="                break" line374="            case Directions.Left:" line375="                _left()" line376="                break" line377="            case Directions.Right:" line378="                _right()" line379="                break" line380="        }" line381="    }" line382="" line383="    /**" line384="     * Stop the AutoBot" line385="     */" line386="    //% blockId=brake" line387="    //% block=&quot;stop&quot;" line388="    //% block.loc.es-ES=&quot;detenerse&quot;" line389="    //% group=&quot;Commands&quot;" line390="    //% weight=330" line391="    export function stop(): void {" line392="        _stop()" line393="    }" line394="" line395="    /**" line396="     * TEST BLOCK" line397="     */" line398="    //% blockId=test" line399="    //% block=&quot;stop&quot;" line400="    //% block.loc.es-ES=&quot;detenerse&quot;" line401="    //% group=&quot;Commands&quot;" line402="    //% weight=590" line403="    //% subcategory=&quot;K-12&quot;" line404="    export function test(): void {" line405="        _stop()" line406="    }" line407="" line408="    /**" line409="     * Detects ligth sensor" line410="     * @returns " line411="     */" line412="    //% blockId=senseLight" line413="    //% block=&quot;light sensor&quot;" line414="    //% group=&quot;Sensors&quot;" line415="    export function senseLight(): number {" line416="        return _forward?1:0" line417="    }" line418="" line419="    /**" line420="     * Send a ping and get the echo time (in microseconds) as a result" line421="     * @param trig tigger pin" line422="     * @param echo echo pin" line423="     * @param maxCmDistance maximum distance in centimeters (default is 500)" line424="     */" line425="    //% blockId=senseUltrasonic" line426="    //% block=&quot;ultrasonic sensor&quot;" line427="    //% group=&quot;Sensors&quot;" line428="    export function senseUltrasonic(maxCmDistance = 500): number {" line429="        // send pulse" line430="        pins.setPull(DigitalPin.P1, PinPullMode.PullNone);" line431="        pins.digitalWritePin(DigitalPin.P1, 0)" line432="        control.waitMicros(2)" line433="        pins.digitalWritePin(DigitalPin.P1, 1)" line434="        control.waitMicros(5)" line435="        pins.digitalWritePin(DigitalPin.P1, 0)" line436="        // read pulse" line437="        let d = pins.pulseIn(DigitalPin.P0, PulseValue.High, maxCmDistance * 58)" line438="        " line439="        if (d == 0) {" line440="            d = maxCmDistance" line441="        }" line442="        return Math.idiv(d, 58); " line443="    }" line444="" line445="    /**" line446="     * Detects the line through the five infrared sensors in front of the AutoBot, and returns straight, left, right or stop." line447="     */" line448="    //% blockId=senseLine" line449="    //% block=&quot;infrared sensor&quot;" line450="    //% group=&quot;Sensors&quot;" line451="    export function senseLine(): Signs {" line452="        if (pins.digitalReadPin(DigitalPin.P0) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P1) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P2) == 0 &amp;&amp; (pins.digitalReadPin(DigitalPin.P3) == 1 &amp;&amp; pins.digitalReadPin(DigitalPin.P4) == 1)))) {" line453="            return Signs.Straight" line454="        } else" line455="            if (pins.digitalReadPin(DigitalPin.P0) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P1) == 0 &amp;&amp; (pins.digitalReadPin(DigitalPin.P2) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P3) == 1 &amp;&amp; pins.digitalReadPin(DigitalPin.P4) == 1)))) {" line456="                return Signs.Left" line457="            } else" line458="                if (pins.digitalReadPin(DigitalPin.P0) == 0 &amp;&amp; (pins.digitalReadPin(DigitalPin.P1) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P2) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P3) == 1 &amp;&amp; pins.digitalReadPin(DigitalPin.P4) == 1)))) {" line459="                    return Signs.Left" line460="                } else" line461="                    if (pins.digitalReadPin(DigitalPin.P0) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P1) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P2) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P3) == 0 &amp;&amp; pins.digitalReadPin(DigitalPin.P4) == 1)))) {" line462="                        return Signs.Right" line463="                    } else" line464="                        if (pins.digitalReadPin(DigitalPin.P0) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P1) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P2) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P3) == 1 &amp;&amp; pins.digitalReadPin(DigitalPin.P4) == 0)))) {" line465="                            return Signs.Right" line466="                        } else" line467="                            if (pins.digitalReadPin(DigitalPin.P0) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P1) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P2) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P3) == 1 &amp;&amp; pins.digitalReadPin(DigitalPin.P4) == 1)))) {" line468="                                return Signs.Stop" line469="                            }" line470="        return Signs.Stop // If no condition then Stop motors" line471="    }" line472="" line473="    /**" line474="     * Detects the tilt of the micro:bit card via the accelerometer" line475="     * @returns " line476="     */" line477="    //% blockId=senseAcelerometer" line478="    //% block=&quot;acelerometer&quot;" line479="    //% group=&quot;Sensors&quot;" line480="    export function senseAcelerometer(): number {" line481="        return 0" line482="    }" line483="" line484="    /**" line485="     * Compares two values and returns true if equal or false if not equal" line486="     * @param A" line487="     * @param B" line488="     */" line489="    //% blockId=compare" line490="    //% block=&quot;$A equal to $B&quot;" line491="    //% B.fieldEditor=&quot;imagedropdown&quot;" line492="    //% B.fieldOptions.columns=4" line493="    //% B.fieldOptions.width=&quot;300&quot;" line494="    //% B.fieldOptions.maxRows=1" line495="    //% group=&quot;Logic&quot;" line496="    export function compare(A: number, B: Signs): boolean {" line497="        return A == B" line498="    }" line499="" line500="    /**" line501="     * Manual Gear Selector" line502="     * @param gear" line503="     */" line504="    //% blockId=getManualGear" line505="    //% block=&quot;$gear&quot;" line506="    //% gear.defl=ManualGears.third" line507="    //% gear.fieldEditor=&quot;imagedropdown&quot;" line508="    //% gear.fieldOptions.columns=3" line509="    //% gear.fieldOptions.width=&quot;225&quot;" line510="    //% gear.fieldOptions.maxRows=2" line511="    //% group=&quot;Variables&quot;" line512="    //% weight=800" line513="    export function getManualGear(gear: ManualGears): number {" line514="        return gear" line515="    }" line516="" line517="    /**" line518="     * Automatic Gear Selector" line519="     * @param gear" line520="     */" line521="    //% blockId=getAutomaticGear" line522="    //% block=&quot;$gear&quot;" line523="    //% gear.defl=AutomaticGears.third" line524="    //% gear.fieldEditor=&quot;imagedropdown&quot;" line525="    //% gear.fieldOptions.columns=3" line526="    //% gear.fieldOptions.width=&quot;225&quot;" line527="    //% gear.fieldOptions.maxRows=2" line528="    //% group=&quot;Variables&quot;" line529="    //% weight=820" line530="    export function getAutomaticGear(gear: AutomaticGears): number {" line531="        return gear" line532="    }" line533="" line534="    /**" line535="    * Direction Selector" line536="    * @param direction" line537="    */" line538="    //% blockId=getDirection" line539="    //% block=&quot;$direction&quot;" line540="    //% direction.defl=Directions.front" line541="    //% direction.fieldEditor=&quot;imagedropdown&quot;" line542="    //% direction.fieldOptions.columns=3" line543="    //% direction.fieldOptions.width=&quot;225&quot;" line544="    //% direction.fieldOptions.maxRows=2" line545="    //% group=&quot;Variables&quot;" line546="    //% weight=830" line547="    export function getDirection(direction: Directions): number {" line548="        return direction" line549="    }" line550="" line551="    /**" line552="    * Sign Selector" line553="    * @param sign" line554="    */" line555="    //% blockId=getSign" line556="    //% block=&quot;$sign&quot;" line557="    //% block." line558="    //% sign.fieldEditor=&quot;imagedropdown&quot;" line559="    //% sign.fieldOptions.columns=4" line560="    //% sign.fieldOptions.width=&quot;300&quot;" line561="    //% sign.fieldOptions.maxRows=2" line562="    //% group=&quot;Variables&quot;    " line563="    //% weight=840" line564="    export function getSign(sign: Signs): number {" line565="        return sign" line566="    }" line567="" line568="    console.log('AutoBot, (c)2023 Garragames')" line569="    console.log('micro:bit version: ' + control.hardwareVersion() )" line570="" line571="}" numlines="572"></mutation></block></statement></block></xml>