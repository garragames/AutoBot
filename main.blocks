<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="3}yU^+qqI!8kp|=A446*" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="YkPr]SahM6C|YRlWuy`d" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace autoBot {" line1="" line2="    const MIN_VEL = 150;  //   0 km/hr" line3="    const MAX_VEL = 1023;  // 100 km/hr" line4="" line5="    /**" line6="     * Setup variables, pins and enumerations" line7="     */" line8="" line9="    // Disable LED Matrix" line10="    led.enable(true)" line11="" line12="    // Stop motors" line13="    stop()" line14="" line15="    // Set initial speed" line16="    setSpeed(50)" line17="" line18="    // Motor Directions" line19="    export enum EnumDir {" line20="        //% block=&quot;forward&quot;" line21="        //% block.loc.es-ES=&quot;adelante&quot;" line22="        Forward = 1," line23="        //% block=&quot;backward&quot;" line24="        //% block.loc.es-ES=&quot;atrás&quot;" line25="        Backward = 2," line26="        //% block=&quot;left&quot;" line27="        //% block.loc.es-ES=&quot;izquierda&quot;" line28="        Left = 3," line29="        //% block=&quot;right&quot;" line30="        //% block.loc.es-ES=&quot;derecha&quot;" line31="        Right = 4," line32="        //% block=&quot;stop&quot;" line33="        //% block.loc.es-ES=&quot;alto&quot;" line34="        Stop = 0" line35="    }" line36="" line37="    // Set speed to both motors" line38="    function setSpeed(speed: number): void {" line39="        let s = speed * (MAX_VEL - MIN_VEL) / 100 + MIN_VEL; // Adjust to the min and max PWM values" line40="        // PWM para izquierdo" line41="        pins.analogWritePin(AnalogPin.P8, s)" line42="        // PWM para derecho" line43="        pins.analogWritePin(AnalogPin.P16, s)" line44="    }" line45="" line46="    //% blockId=senseAcelerometer" line47="    //% block=&quot;sense acelerometer&quot;" line48="    //% block.loc.es-ES=&quot;detectar acelerómetro&quot;" line49="    //% group=&quot;Sensors&quot;" line50="    export function senseAcelerometer(): number {" line51="        return 0" line52="    }" line53="" line54="    //% blockId=senseDistance" line55="    //% block=&quot;sense distance&quot;" line56="    //% block.loc.es-ES=&quot;detectar distancia&quot;" line57="    //% group=&quot;Sensors&quot;" line58="    export function senseDistance(): number {" line59="        return 0" line60="    }" line61="" line62="    /**" line63="     * Detects the line through the five infrared sensors in front of the AutoBot, and returns forward, backward, left, right or stop." line64="     */" line65="    //% blockId=senseLine" line66="    //% block=&quot;sense line&quot;" line67="    //% block.loc.es-ES=&quot;detectar línea&quot;" line68="    //% group=&quot;Sensors&quot;" line69="    export function senseLine(): EnumDir {" line70="        if (pins.digitalReadPin(DigitalPin.P0) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P1) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P2) == 0 &amp;&amp; (pins.digitalReadPin(DigitalPin.P3) == 1 &amp;&amp; pins.digitalReadPin(DigitalPin.P4) == 1)))) {" line71="            return EnumDir.Forward" line72="        } else" line73="            if (pins.digitalReadPin(DigitalPin.P0) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P1) == 0 &amp;&amp; (pins.digitalReadPin(DigitalPin.P2) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P3) == 1 &amp;&amp; pins.digitalReadPin(DigitalPin.P4) == 1)))) {" line74="                return EnumDir.Left" line75="            } else" line76="                if (pins.digitalReadPin(DigitalPin.P0) == 0 &amp;&amp; (pins.digitalReadPin(DigitalPin.P1) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P2) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P3) == 1 &amp;&amp; pins.digitalReadPin(DigitalPin.P4) == 1)))) {" line77="                    return EnumDir.Left" line78="                } else" line79="                    if (pins.digitalReadPin(DigitalPin.P0) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P1) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P2) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P3) == 0 &amp;&amp; pins.digitalReadPin(DigitalPin.P4) == 1)))) {" line80="                        return EnumDir.Right" line81="                    } else" line82="                        if (pins.digitalReadPin(DigitalPin.P0) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P1) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P2) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P3) == 1 &amp;&amp; pins.digitalReadPin(DigitalPin.P4) == 0)))) {" line83="                            return EnumDir.Right" line84="                        } else" line85="                            if (pins.digitalReadPin(DigitalPin.P0) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P1) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P2) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P3) == 1 &amp;&amp; pins.digitalReadPin(DigitalPin.P4) == 1)))) {" line86="                                return EnumDir.Stop" line87="                            }" line88="        return EnumDir.Stop // If no condition then Stop motors" line89="    }" line90="    " line91="" line92="" line93="    /**" line94="     * Stop the autobot" line95="     */" line96="    //% blockId=stop" line97="    //% block=&quot;stop&quot;" line98="    //% block.loc.es-ES=&quot;alto&quot;" line99="    //% group=&quot;Movements&quot;" line100="    export function stop(): void {" line101="        pins.digitalWritePin(DigitalPin.P12, 0)" line102="        pins.digitalWritePin(DigitalPin.P13, 0)" line103="        pins.digitalWritePin(DigitalPin.P14, 0)" line104="        pins.digitalWritePin(DigitalPin.P15, 0)" line105="    }" line106="" line107="    /**" line108="     * Turn the autobot right at speed between 0 and 100 km/hr" line109="     * @param speed" line110="     */" line111="    //% blockId=right" line112="    //% block=&quot;turn right $speed km/hr&quot;" line113="    //% block.loc.es-ES=&quot;derecha $speed km/hr&quot;" line114="    //% group=&quot;Movements&quot;" line115="    //% speed.min=0 speed.max=100" line116="    //% speed.defl=50" line117="    export function right(speed: number): void {" line118="        setSpeed(speed)" line119="        pins.digitalWritePin(DigitalPin.P12, 0)" line120="        pins.digitalWritePin(DigitalPin.P13, 0)" line121="        pins.digitalWritePin(DigitalPin.P14, 1)" line122="        pins.digitalWritePin(DigitalPin.P15, 0)" line123="    }" line124="" line125="" line126="    /**" line127="     * Turn the autobot left at speed between 0 and 100 km/hr" line128="     * @param speed" line129="     */" line130="    //%blockId=left" line131="    //%block=&quot;turn left $speed km/hr&quot;" line132="    //% block.loc.es-ES=&quot;izquierda $speed km/hr&quot;" line133="    //% group=&quot;Movements&quot;" line134="    //% speed.min=0 speed.max=100" line135="    //% speed.defl=50" line136="    export function left(speed: number): void {" line137="        setSpeed(speed)" line138="        pins.digitalWritePin(DigitalPin.P12, 0)" line139="        pins.digitalWritePin(DigitalPin.P13, 1)" line140="        pins.digitalWritePin(DigitalPin.P14, 0)" line141="        pins.digitalWritePin(DigitalPin.P15, 0)" line142="    }" line143="" line144="    /**" line145="     * Moves the autobot backward at speed between 0 and 100 km/hr" line146="     * @param speed" line147="     */" line148="    //%blockId=backward" line149="    //%block=&quot;go backward $speed km/hr&quot;" line150="    //%block.loc.es-ES=&quot;atrás $speed km/hr&quot;" line151="    //% group=&quot;Movements&quot;" line152="    //% speed.min=0 speed.max=100" line153="    //% speed.defl=50" line154="    export function backward" line155="        (speed: number): void {" line156="        setSpeed(speed)" line157="        pins.digitalWritePin(DigitalPin.P12, 1)" line158="        pins.digitalWritePin(DigitalPin.P13, 0)" line159="        pins.digitalWritePin(DigitalPin.P14, 0)" line160="        pins.digitalWritePin(DigitalPin.P15, 1)" line161="    }" line162="" line163="" line164="    /**" line165="     * Moves the autobot forward at speed between 0 and 100 km/hr" line166="     * @param speed" line167="     */" line168="    //%blockId=forward" line169="    //%block=&quot;go forward $speed km/hr&quot;" line170="    //%block.loc.es-ES=&quot;adelante $speed km/hr&quot;" line171="    //% group=&quot;Movements&quot;" line172="    //% speed.min=0 speed.max=100" line173="    //% speed.defl=50" line174="    export function forward(speed: number): void {" line175="        setSpeed(speed)" line176="        pins.digitalWritePin(DigitalPin.P12, 0)" line177="        pins.digitalWritePin(DigitalPin.P13, 1)" line178="        pins.digitalWritePin(DigitalPin.P14, 1)" line179="        pins.digitalWritePin(DigitalPin.P15, 0)" line180="    }" line181="" line182="    /**" line183="     * Direction constants" line184="     */" line185="" line186="    /**" line187="     * Returns the value of stop to compare with the value returned by the line sensor." line188="     */" line189="    //% blockId=stopDir" line190="    //% block=&quot;stop&quot;" line191="    //% block.loc.es-ES=&quot;alto&quot;" line192="    //% group=&quot;Directions&quot;" line193="    export function stopDir(): number {" line194="        return EnumDir.Stop" line195="    }" line196="" line197="    /**" line198="     * Returns the value of right to compare with the value returned by the line sensor." line199="     */" line200="    //% blockId=rightDir" line201="    //% block=&quot;right&quot;" line202="    //% block.loc.es-ES=&quot;derecha&quot;" line203="    //% group=&quot;Directions&quot;" line204="    export function rightDir(): number {" line205="        return EnumDir.Right" line206="    }" line207="" line208="" line209="    /**" line210="     * Returns the value of left to compare with the value returned by the line sensor." line211="     */" line212="    //% blockId=leftDir" line213="    //% block=&quot;left&quot;" line214="    //% block.loc.es-ES=&quot;izquierda&quot;" line215="    //% group=&quot;Directions&quot;" line216="    export function leftDir(): number {" line217="        return EnumDir.Left" line218="    }" line219="" line220="    /**" line221="     * Returns the value of backward to compare with the value returned by the line sensor." line222="     */" line223="    //% blockId=backwardDir" line224="    //% block=&quot;backforward&quot;" line225="    //% block.loc.es-ES=&quot;atrás&quot;" line226="    //% group=&quot;Directions&quot;" line227="    export function backwardDir(): number {" line228="        return EnumDir.Backward" line229="    }" line230="" line231="    /**" line232="     * Returns the value of forward to compare with the value returned by the line sensor." line233="     */" line234="    //% blockId=forwardDir" line235="    //% block=&quot;forward&quot;" line236="    //% block.loc.es-ES=&quot;adelante&quot;" line237="    //% group=&quot;Directions&quot;" line238="    export function forwardDir(): number {" line239="        return EnumDir.Forward" line240="    }" line241="" line242="    /**" line243="     * Compares two values and returns true if equal or false if not equal" line244="     */" line245="    //% blockId=compareDir" line246="    //% block=&quot;$directionA equal to $directionB&quot;" line247="    //% block.loc.es-ES=&quot;$directionA igual a $directionB&quot;" line248="    //% group=&quot;Logic&quot;" line249="    export function equal(directionA: number, directionB: number): boolean {" line250="        return directionA == directionB" line251="    }" line252="}" numlines="253"></mutation></block></statement></block></xml>