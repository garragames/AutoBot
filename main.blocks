<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="xhRlWU+HLOoZ$Ie3q=Q|" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="!ZG(2pZ:L0bYWbxTLFK%" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace autoBot {" line1="" line2="    const MIN_VEL = 150;  //   0 km/hr" line3="    const MAX_VEL = 1023; // 100 km/hr" line4="" line5="    const FIRST_GEAR = 20;" line6="    const SECOND_GEAR = 40;" line7="    const THIRD_GEAR = 60;" line8="    const FOURTH_GEAR = 80;" line9="    const FIFTH_GEAR = 100;" line10="    const DRIVE_GEAR = 100;" line11="    const NEUTRAL_GEAR = 0;" line12="    const PARKING_GEAR = 0;" line13="    const REVERSE_GEAR = 20;" line14="" line15="    /**" line16="     * Setup variables, pins and enumerations" line17="     */" line18="" line19="    // Disable LED Matrix" line20="    led.enable(true) // Set true to DEBUG" line21="" line22="    // Engine Sates" line23="    export enum Engine {" line24="        //% block=&quot;off&quot;" line25="        //% jres=icons.engine-off" line26="        Off = 0," line27="        //% block=&quot;on&quot;" line28="        //% jres=icons.engine-on" line29="        On = 1" line30="    }" line31="" line32="    // Directions" line33="    export enum Directions {" line34="        //% block=&quot;left&quot;" line35="        //% jres=icons.direction-left" line36="        Left = 1," line37="        //% block=&quot;front&quot;" line38="        //% jres=icons.direction-front" line39="        Front = 2," line40="        //% block=&quot;right&quot;" line41="        //% jres=icons.direction-right" line42="        Right = 3" line43="    }" line44="" line45="    // Seat Belt States" line46="    export enum BeltStates {" line47="        //% block=&quot;unfasten&quot;" line48="        //% jres=icons.belt-unfasten" line49="        Unfasten = 0," line50="        //% block=&quot;fasten&quot;" line51="        //% jres=icons.belt-fasten" line52="        Fasten = 1" line53="    }" line54="" line55="    // Signs" line56="    export enum Signs {" line57="        //% block=&quot;stop&quot;" line58="        //% jres=icons.stop-sign" line59="        Stop = 0," line60="        //% block=&quot;left&quot;" line61="        //% jres=icons.left-sign" line62="        Left = 1," line63="        //% block=&quot;straight&quot;" line64="        //% jres=icons.straight-sign" line65="        Straight = 2," line66="        //% block=&quot;backward&quot;" line67="        //% jres=icons.backward-sign" line68="        //Backward = 3," line69="        //% block=&quot;right&quot;" line70="        //% jres=icons.right-sign" line71="        Right = 4" line72="    }" line73="" line74="    // Manual Gears" line75="    export enum ManualGears {" line76="        //% block=&quot;first gear&quot;" line77="        //% jres=icons.first-gear" line78="        First = FIRST_GEAR," line79="        //% block=&quot;third gear&quot;" line80="        //% jres=icons.third-gear" line81="        Third = THIRD_GEAR," line82="        //% block=&quot;fifth gear&quot;" line83="        //% jres=icons.neutral-gear" line84="        Neutral = NEUTRAL_GEAR," line85="        //% block=&quot;second gear&quot;" line86="        //% jres=icons.second-gear" line87="        Second = SECOND_GEAR," line88="        //% block=&quot;fourth gear&quot;" line89="        //% jres=icons.fourth-gear" line90="        Fourth = FOURTH_GEAR," line91="        //% block=&quot;reverse gear&quot;" line92="        //% jres=icons.reverse-gear" line93="        Reverse = REVERSE_GEAR" line94="    }" line95="" line96="    // Automatic Gears" line97="    export enum AutomaticGears {" line98="        //% block=&quot;first gear&quot;" line99="        //% jres=icons.parking-gear" line100="        Parking = PARKING_GEAR," line101="        //% block=&quot;third gear&quot;" line102="        //% jres=icons.reverse-gear" line103="        Reverse = REVERSE_GEAR," line104="        //% block=&quot;fifth gear&quot;" line105="        //% jres=icons.neutral-gear" line106="        Neutral = NEUTRAL_GEAR," line107="        //% block=&quot;second gear&quot;" line108="        //% jres=icons.drive-gear" line109="        Drive = DRIVE_GEAR," line110="        //% block=&quot;fourth gear&quot;" line111="        //% jres=icons.second-gear" line112="        Second = SECOND_GEAR," line113="        //% block=&quot;reverse gear&quot;" line114="        //% jres=icons.first-gear" line115="        First = FIRST_GEAR" line116="    }" line117="" line118="    let SIGN = Signs.Straight" line119="    let BELT = BeltStates.Unfasten" line120="    let DIRECTION = Directions.Front" line121="    let ENGINE = Engine.Off" line122="    let AUTOMATIC_GEAR = AutomaticGears.Parking" line123="    let MANUAL_GEAR = ManualGears.Neutral" line124="    let SPEED = 0" line125="    let FORWARD = true" line126="" line127="    /**" line128="     * Stop the autobot" line129="     */" line130="    export function _stop(): void {" line131="        pins.digitalWritePin(DigitalPin.P12, 0)" line132="        pins.digitalWritePin(DigitalPin.P13, 0)" line133="        pins.digitalWritePin(DigitalPin.P14, 0)" line134="        pins.digitalWritePin(DigitalPin.P15, 0)" line135="    }" line136="" line137="    /**" line138="     * Turn the autobot right" line139="     */" line140="    export function _right(): void {" line141="        pins.digitalWritePin(DigitalPin.P12, FORWARD?0:1)" line142="        pins.digitalWritePin(DigitalPin.P13, FORWARD?0:1)" line143="        pins.digitalWritePin(DigitalPin.P14, FORWARD?1:0)" line144="        pins.digitalWritePin(DigitalPin.P15, FORWARD?0:1)" line145="    }" line146="" line147="    /**" line148="    * Turn the autobot left" line149="    */" line150="    export function _left(): void {" line151="        pins.digitalWritePin(DigitalPin.P12, FORWARD?0:1)" line152="        pins.digitalWritePin(DigitalPin.P13, FORWARD?1:0)" line153="        pins.digitalWritePin(DigitalPin.P14, FORWARD?0:1)" line154="        pins.digitalWritePin(DigitalPin.P15, FORWARD?0:1)" line155="    }" line156="" line157="    /**" line158="     * Moves the autobot backward " line159="     */" line160="    /*" line161="    export function _backward(): void {" line162="        pins.digitalWritePin(DigitalPin.P12, FORWARD?1:0)" line163="        pins.digitalWritePin(DigitalPin.P13, FORWARD?0:1)" line164="        pins.digitalWritePin(DigitalPin.P14, FORWARD?0:1)" line165="        pins.digitalWritePin(DigitalPin.P15, FORWARD?1:0)" line166="    }" line167="    */" line168="" line169="    /**" line170="     * Moves the autobot straight" line171="     */" line172="    export function _straight(): void {" line173="        pins.digitalWritePin(DigitalPin.P12, FORWARD?0:1)" line174="        pins.digitalWritePin(DigitalPin.P13, FORWARD?1:0)" line175="        pins.digitalWritePin(DigitalPin.P14, FORWARD?1:0)" line176="        pins.digitalWritePin(DigitalPin.P15, FORWARD?0:1)" line177="    }" line178="" line179="    /**" line180="     * Set Speed" line181="     * @param speed" line182="     */" line183="    function _setSpeed(speed: number): void {" line184="        let s = speed * (MAX_VEL - MIN_VEL) / 100 + MIN_VEL; // Adjust to the min and max PWM values" line185="        // PWM para motor izquierdo" line186="        pins.analogWritePin(AnalogPin.P8, s)" line187="        // PWM para motor derecho" line188="        pins.analogWritePin(AnalogPin.P16, s)" line189="    }" line190="" line191="    /**" line192="     * Set seat belt state" line193="     * @param status" line194="     */" line195="    //% blockId=setSeatbelt" line196="    //% block=&quot;seat belt $state&quot;" line197="    //% state.defl=BeltStates.unfasten" line198="    //% state.fieldEditor=&quot;imagedropdown&quot;" line199="    //% state.fieldOptions.columns=2" line200="    //% state.fieldOptions.width=&quot;150&quot;" line201="    //% state.fieldOptions.maxRows=1" line202="    //% group=&quot;Commands&quot;" line203="    //% weight=590" line204="    export function setSeatbelt(state: BeltStates): void {" line205="        if (state == BeltStates.Unfasten) {" line206="            if (ENGINE == Engine.Off) {" line207="                BELT = state" line208="            } else {" line209="                console.error('Do not unfasten your seat belt while the engine is on')" line210="            }" line211="        } else {" line212="            BELT = state" line213="        }" line214="    }" line215="" line216="    /**" line217="    * Turn Engine On/Off" line218="    * @param state" line219="    */" line220="    //% blockId=setEngine" line221="    //% block=&quot;turn engine $state&quot;" line222="    //% state.defl=Engine.off" line223="    //% state.fieldEditor=&quot;imagedropdown&quot; " line224="    //% state.fieldOptions.columns=2" line225="    //% state.fieldOptions.width=&quot;150&quot;" line226="    //% state.fieldOptions.maxRows=1" line227="    //% group=&quot;Commands&quot;" line228="    //% weight=550" line229="    export function setEngine(state: Engine): void {" line230="        /*" line231="        console.log('Gear: ' + MANUAL_GEAR)" line232="        console.log('Engine: ' + ENGINE)" line233="        console.log('State: ' + state)" line234="        */" line235="" line236="        if (BELT == BeltStates.Unfasten &amp;&amp; state == Engine.On) {" line237="            console.warn('You cannot turn on the engine if you have not fastened your seat belt.')" line238="            return;" line239="        }" line240="" line241="        if (MANUAL_GEAR != ManualGears.Neutral &amp;&amp; state == Engine.On) {" line242="            console.warn('You need to put the AutoBot in neutral or parking to turn on the engine.')" line243="            return;" line244="        }" line245="" line246="        if (MANUAL_GEAR != ManualGears.Neutral &amp;&amp; state == Engine.Off) {" line247="            console.warn('You need to put the AutoBot in neutral or parking to be able to turn off the engine.')" line248="            return;" line249="        }" line250="" line251="        ENGINE = state;" line252="    }" line253="" line254="    /**" line255="    * Set Direction" line256="    * @param direction" line257="    */" line258="    //% blockId=turnDirection" line259="    //% block=&quot;turn direction $direction&quot;" line260="    //% direction.defl=Directions.front" line261="    //% direction.fieldEditor=&quot;imagedropdown&quot; " line262="    //% direction.fieldOptions.columns=3" line263="    //% direction.fieldOptions.width=&quot;225&quot;" line264="    //% direction.fieldOptions.maxRows=1" line265="    //% group=&quot;Commands&quot;" line266="    //% weight=380" line267="    export function turnDirection(direction: Directions): void {" line268="        DIRECTION = direction" line269="    }" line270="" line271="    /**" line272="    * Set Manual Gear" line273="    * @param gear" line274="    */" line275="    //% blockId=setManualGear" line276="    //% block=&quot;set gear $gear&quot;" line277="    //% blockImage=icons.first-gear" line278="    //% gear.defl=Gears.Third" line279="    //% gear.fieldEditor=&quot;imagedropdown&quot; " line280="    //% gear.fieldOptions.columns=3" line281="    //% gear.fieldOptions.width=&quot;225&quot;" line282="    //% gear.fieldOptions.maxRows=2" line283="    //% group=&quot;Commands&quot;" line284="    //% weight=370" line285="    export function setManualGear(gear: ManualGears): void {" line286="        if (BELT == BeltStates.Fasten) {" line287="            MANUAL_GEAR = gear" line288="            SPEED = gear" line289="            if (gear == REVERSE_GEAR) {" line290="                FORWARD = false" line291="            } else {" line292="                FORWARD = true" line293="            }" line294="        } else {" line295="            console.warn('You cannot shift gears if you do not have your seat belt fastened.')" line296="        }" line297="    }" line298="" line299="    /**" line300="        * Set Automatic Gear " line301="        * @param gear" line302="        */" line303="    //% blockId=setAutomaticGear" line304="    //% block=&quot;set gear $gear&quot;" line305="    //% gear.defl=Gears.Third" line306="    //% gear.fieldEditor=&quot;imagedropdown&quot; " line307="    //% gear.fieldOptions.columns=1" line308="    //% gear.fieldOptions.width=&quot;75&quot;" line309="    //% gear.fieldOptions.maxRows=6" line310="    //% group=&quot;Commands&quot;" line311="    //% weight=360" line312="    export function setAutomaticGear(gear: AutomaticGears): void {" line313="        if (BELT == BeltStates.Fasten) {" line314="            AUTOMATIC_GEAR = gear" line315="            SPEED = gear" line316="            if (gear == REVERSE_GEAR) {" line317="                FORWARD = false" line318="            } else {" line319="                FORWARD = true" line320="            }" line321="        } else {" line322="            console.warn('You cannot shift gears if you do not have your seat belt fastened.')" line323="        }" line324="    }" line325="" line326="    /**" line327="     * Move de AutoBot" line328="     */" line329="    //% blockId=move" line330="    //% block=&quot;move&quot;" line331="    //% block.loc.es-ES=&quot;moverse&quot;" line332="    //% group=&quot;Commands&quot;" line333="    //% weight=340" line334="    export function move(): void {" line335="        _setSpeed(SPEED)" line336="        switch (DIRECTION) {" line337="            case Directions.Front:" line338="                _straight()" line339="                break" line340="            case Directions.Left:" line341="                _left()" line342="                break" line343="            case Directions.Right:" line344="                _right()" line345="                break" line346="        }" line347="    }" line348="" line349="    /**" line350="     * Stop the AutoBot" line351="     */" line352="    //% blockId=brake" line353="    //% block=&quot;stop&quot;" line354="    //% block.loc.es-ES=&quot;detenerse&quot;" line355="    //% group=&quot;Commands&quot;" line356="    //% weight=330" line357="    export function stop(): void {" line358="        _stop()" line359="    }" line360="" line361="    /**" line362="     * TEST BLOCK" line363="     */" line364="    //% blockId=test" line365="    //% block=&quot;stop&quot;" line366="    //% block.loc.es-ES=&quot;detenerse&quot;" line367="    //% group=&quot;Commands&quot;" line368="    //% weight=590" line369="    //% subcategory=&quot;K-12&quot;" line370="    export function test(): void {" line371="        _stop()" line372="    }" line373="" line374="    /**" line375="     * Detects ligth sensor" line376="     * @returns " line377="     */" line378="    //% blockId=senseLight" line379="    //% block=&quot;light sensor&quot;" line380="    //% group=&quot;Sensors&quot;" line381="    export function senseLight(): number {" line382="        return FORWARD?1:0" line383="    }" line384="" line385="    /**" line386="     * Send a ping and get the echo time (in microseconds) as a result" line387="     * @param trig tigger pin" line388="     * @param echo echo pin" line389="     * @param maxCmDistance maximum distance in centimeters (default is 500)" line390="     */" line391="    //% blockId=senseUltrasonic" line392="    //% block=&quot;ultrasonic sensor&quot;" line393="    //% group=&quot;Sensors&quot;" line394="    export function senseUltrasonic(maxCmDistance = 500): number {" line395="        // send pulse" line396="        pins.setPull(DigitalPin.P1, PinPullMode.PullNone);" line397="        pins.digitalWritePin(DigitalPin.P1, 0);" line398="        control.waitMicros(2);" line399="        pins.digitalWritePin(DigitalPin.P1, 1);" line400="        control.waitMicros(5);" line401="        pins.digitalWritePin(DigitalPin.P1, 0);" line402="        // read pulse" line403="        const d = pins.pulseIn(DigitalPin.P0, PulseValue.High, maxCmDistance * 58);" line404="        return Math.idiv(d, 58); " line405="    }" line406="" line407="    /**" line408="     * Detects the line through the five infrared sensors in front of the AutoBot, and returns straight, left, right or stop." line409="     */" line410="    //% blockId=senseLine" line411="    //% block=&quot;infrared sensor&quot;" line412="    //% group=&quot;Sensors&quot;" line413="    export function senseLine(): Signs {" line414="        if (pins.digitalReadPin(DigitalPin.P0) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P1) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P2) == 0 &amp;&amp; (pins.digitalReadPin(DigitalPin.P3) == 1 &amp;&amp; pins.digitalReadPin(DigitalPin.P4) == 1)))) {" line415="            return Signs.Straight" line416="        } else" line417="            if (pins.digitalReadPin(DigitalPin.P0) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P1) == 0 &amp;&amp; (pins.digitalReadPin(DigitalPin.P2) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P3) == 1 &amp;&amp; pins.digitalReadPin(DigitalPin.P4) == 1)))) {" line418="                return Signs.Left" line419="            } else" line420="                if (pins.digitalReadPin(DigitalPin.P0) == 0 &amp;&amp; (pins.digitalReadPin(DigitalPin.P1) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P2) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P3) == 1 &amp;&amp; pins.digitalReadPin(DigitalPin.P4) == 1)))) {" line421="                    return Signs.Left" line422="                } else" line423="                    if (pins.digitalReadPin(DigitalPin.P0) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P1) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P2) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P3) == 0 &amp;&amp; pins.digitalReadPin(DigitalPin.P4) == 1)))) {" line424="                        return Signs.Right" line425="                    } else" line426="                        if (pins.digitalReadPin(DigitalPin.P0) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P1) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P2) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P3) == 1 &amp;&amp; pins.digitalReadPin(DigitalPin.P4) == 0)))) {" line427="                            return Signs.Right" line428="                        } else" line429="                            if (pins.digitalReadPin(DigitalPin.P0) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P1) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P2) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P3) == 1 &amp;&amp; pins.digitalReadPin(DigitalPin.P4) == 1)))) {" line430="                                return Signs.Stop" line431="                            }" line432="        return Signs.Stop // If no condition then Stop motors" line433="    }" line434="" line435="    /**" line436="     * Detects the tilt of the micro:bit card via the accelerometer" line437="     * @returns " line438="     */" line439="    //% blockId=senseAcelerometer" line440="    //% block=&quot;acelerometer&quot;" line441="    //% group=&quot;Sensors&quot;" line442="    export function senseAcelerometer(): number {" line443="        return 0" line444="    }" line445="" line446="    /**" line447="     * Compares two values and returns true if equal or false if not equal" line448="     * @param A" line449="     * @param B" line450="     */" line451="    //% blockId=compare" line452="    //% block=&quot;$A equal to $B&quot;" line453="    //% B.fieldEditor=&quot;imagedropdown&quot;" line454="    //% B.fieldOptions.columns=4" line455="    //% B.fieldOptions.width=&quot;300&quot;" line456="    //% B.fieldOptions.maxRows=1" line457="    //% group=&quot;Logic&quot;" line458="    export function compare(A: number, B: Signs): boolean {" line459="        return A == B" line460="    }" line461="" line462="    /**" line463="     * Manual Gear Selector" line464="     * @param gear" line465="     */" line466="    //% blockId=getManualGear" line467="    //% block=&quot;$gear&quot;" line468="    //% gear.defl=ManualGears.third" line469="    //% gear.fieldEditor=&quot;imagedropdown&quot;" line470="    //% gear.fieldOptions.columns=3" line471="    //% gear.fieldOptions.width=&quot;225&quot;" line472="    //% gear.fieldOptions.maxRows=2" line473="    //% group=&quot;Variables&quot;" line474="    //% weight=800" line475="    export function getManualGear(gear: ManualGears): number {" line476="        return gear" line477="    }" line478="" line479="    /**" line480="     * Automatic Gear Selector" line481="     * @param gear" line482="     */" line483="    //% blockId=getAutomaticGear" line484="    //% block=&quot;$gear&quot;" line485="    //% gear.defl=AutomaticGears.third" line486="    //% gear.fieldEditor=&quot;imagedropdown&quot;" line487="    //% gear.fieldOptions.columns=3" line488="    //% gear.fieldOptions.width=&quot;225&quot;" line489="    //% gear.fieldOptions.maxRows=2" line490="    //% group=&quot;Variables&quot;" line491="    //% weight=820" line492="    export function getAutomaticGear(gear: AutomaticGears): number {" line493="        return gear" line494="    }" line495="" line496="    /**" line497="    * Direction Selector" line498="    * @param direction" line499="    */" line500="    //% blockId=getDirection" line501="    //% block=&quot;$direction&quot;" line502="    //% direction.defl=Directions.front" line503="    //% direction.fieldEditor=&quot;imagedropdown&quot;" line504="    //% direction.fieldOptions.columns=3" line505="    //% direction.fieldOptions.width=&quot;225&quot;" line506="    //% direction.fieldOptions.maxRows=2" line507="    //% group=&quot;Variables&quot;" line508="    //% weight=830" line509="    export function getDirection(direction: Directions): number {" line510="        return direction" line511="    }" line512="" line513="    /**" line514="    * Sign Selector" line515="    * @param sign" line516="    */" line517="    //% blockId=getSign" line518="    //% block=&quot;$sign&quot;" line519="    //% block." line520="    //% sign.fieldEditor=&quot;imagedropdown&quot;" line521="    //% sign.fieldOptions.columns=4" line522="    //% sign.fieldOptions.width=&quot;300&quot;" line523="    //% sign.fieldOptions.maxRows=2" line524="    //% group=&quot;Variables&quot;    " line525="    //% weight=840" line526="    export function getSign(sign: Signs): number {" line527="        return sign" line528="    }" line529="" line530="    console.log('AutoBot, (c)2023 Garragames')" line531="    console.log('micro:bit version: ' + control.hardwareVersion())" line532="    console.log('RAM Size: ' + control.ramSize())" line533="" line534="}" numlines="535"></mutation></block></statement></block></xml>